from math import *
import random
import time
import matplotlib.pyplot as plt

class Particle:
  def __init__(self, x,y,z,v,vx,vy,vz,status):
    self.x = x
    self.y = y
    self.z = z
    self.v = v
    self.vx = vx
    self.vy = vy
    self.vz = vz
    self.status = status

def generate_position(a,v):
    random.seed()
    Particle.x = random.random() * a
    Particle.y = random.random() * a
    Particle.z = random.random() * a

    Particle.status = 0
    Particle.v = v
    teta = acos(1 - (2 * random.random()))
    taw = 2 * pi * random.random()
    Particle.vz = v * cos(teta)
    Particle.vx = v * sin(teta) * cos(taw)
    Particle.vy = v * sin(teta) * sin(taw)
    return Particle

def generate_velocity(p,a,v):
    random.seed()
    teta = acos(1 - (2 * random.random()))
    taw = 2 * pi * random.random()
    p.vz = v * cos(teta)
    p.vx = v * sin(teta) * cos(taw)
    p.vy = v * sin(teta) * sin(taw)
    return p

def move_particle(p,a,v,deltaT):
    nextV = generate_velocity(p,a,v)
    p.x = ((nextV.vx * deltaT) + p.x)
    p.y = ((nextV.vy * deltaT) + p.y)
    p.z = ((nextV.vz * deltaT) + p.z)
    return p

def is_hit_wall(next,a,deltaT,r,ori):
    random.seed()

    if (next.z > a or next.z < 0):
        if (next.z > a):
            distance = sqrt( (next.x-(0.5*a))**2 + (next.y-(0.5*a))**2 )
            #if( ( next.x > (0.5*a)-r and next.x < (0.5*a)+r ) and ( next.y > (0.5*a)-r and next.y < (0.5*a)+r ) ):
            if (distance < r ):
                next.status = 1
        else:
            next.z = 0

        deltaTemp = (next.z - ori.z) / ori.vz
        deltaSisa = deltaT - deltaTemp
        next.z = (next.vz * deltaSisa) + next.z
    elif(next.x>a or next.x<0):
        if(next.x>a):
            next.x = a
        else:
            next.x = 0

        deltaTemp = (next.x - ori.x) / ori.vx
        deltaSisa = deltaT - deltaTemp
        next.x = (next.vx * deltaSisa) + next.x
    elif (next.y > a or next.y < 0):
        if (next.y > a):
            next.y = a
        else:
            next.y = 0

        deltaTemp = (next.y - ori.y) / ori.vy
        deltaSisa = deltaT - deltaTemp
        next.y = (next.vy * deltaSisa) + next.y



    return next




a = 12
v = 6

kena = 0
waktu = []
banyaknya = []

judge = 0

it = 0
n = 1000
max_it = 1000
deltaT = 0.1
max_it = max_it/deltaT
r = float(a/4)
n_sisa = n
arrParticle = []

for i in range(n):
    arrParticle.append(Particle(0,0,0,0,0,0,0,0))
    temp = generate_position(a, v)
    arrParticle[i] = (Particle(temp.x,temp.y,temp.z,temp.v,temp.vx,temp.vy,temp.vz,temp.status))

while (judge==0):

    tAwal = time.time()
    kena = 0
    it = it + 1

    if(it==max_it):
        judge = 1

    print('===========================================iterasi:',it)

    for j in range(n):

        if(arrParticle[j].status==0):
            tempMove = move_particle(arrParticle[j],a,v,deltaT)
            temp = is_hit_wall(tempMove,a,deltaT,r,arrParticle[j])
            arrParticle[j] = temp

            if(temp.status==1):
                 kena = kena + 1



    tAkhir = time.time()
    waktu.append(tAkhir)
    n_sisa = n_sisa - kena
    print(n_sisa)
    banyaknya.append(n_sisa)

plt.plot(waktu, banyaknya)
plt.xlabel('Waktu')
plt.ylabel('Banyaknya')
plt.show()


